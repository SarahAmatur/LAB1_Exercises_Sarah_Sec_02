# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13MCooF99gJIxqfVEq7iXExKUMvORnW5C
"""

#%%
# Student ID: 2018-2-60-59
# Student Name: Amatur Rahman Sarah
## Lab Assignment- 01



import pandas as pd
df = pd.read_csv('/dataset_lab04 (1).csv')
df.info()

def lab04_task1_IMRAN():
    print('Number of Rows: ', df.shape[0])
    print('Number of Columns: ', df.shape[1])

def lab04_task2_IMRAN():
    print(df['Time'].describe())
    print(df['Amount'].describe())

def lab04_task3_IMRAN():
    df_Amount = df[['Amount']]
    df_Time = df[['Time']]
    
    print("Amount Information:\n")
    print("Mean = ", df_Amount.mean())
    print("Median = ", df_Amount.median())
    print("SD = ", df_Amount.std())
    print("Variance = ", df_Amount.var())
    
    print()
    
    print("Time Information:\n")
    print("Mean = ", df_Time.mean())
    print("Median = ", df_Time.median())
    print("SD = ", df_Time.std())
    print("Variance = ", df_Time.var())

def lab04_task4_IMRAN():
    df.boxplot(column=['Amount','Time'])
    
    print("Amount Information:\n")
    df_Amount = df[['Amount']]
    print('Average: ', df_Amount.mean())
    print('Min: ', df_Amount.min())
    print('Q1: ', df_Amount.quantile(0.25))
    print('Median: ',df_Amount.median())
    print('Q3: ', df_Amount.quantile(0.75))
    print("IQR = ", df_Amount.quantile(0.75)-df_Amount.quantile(0.25))
    print('Max: ', df_Amount.max())
    
    print()
    
    print("Time Information:\n")
    df_Time = df[['Time']]
    print('Average: ', df_Time.mean())
    print('Min: ', df_Time.min())
    print('Q1: ', df_Time.quantile(0.25))
    print('Median: ',df_Time.median())
    print('Q3: ', df_Time.quantile(0.75))
    print("IQR = ", df_Time.quantile(0.75)-df_Time.quantile(0.25))
    print('Max: ', df_Time.max())
    
    print("Comment: Outliers are the extreme values of a dataset") 
    print("There are many extreme values in 'Amount' that we can see in the graph")
    print("But no outliers in 'Time'")

def lab04_task5_IMRAN():
    df_Time = df[['Time']]
    df_Time.hist(column = ['Time'], bins = 100)


    df_Amount = df[['Amount']]
    df_Amount.hist(column = ['Amount'], bins = 100)
    
    print("Skewness of Amount: ", df_Amount.skew())
    print("\nComment: Here we can see skewness of Amount is greater than 1. So it is highly skewed\n")
    print("Kurtosis of Amount: ", df_Amount.kurt())
    print("\nComment: As the kurtosis > 3. So it is leptokurtic\n")
    
    print("Skewness of Time: ", df.Time.skew())
    print("\nComment: Here we can see skewness of Time is between -0.5 to +0.5. So it is fairly symetrical\n")
    print("Kurtosis of Time: ", df_Time.kurt())
    print("\nComment: As the kurtosis < 3. So it is platykurtic\n")

def lab04_task6_IMRAN():
    cls_val_0 = df.loc[df['Class'] == 0]
    cls_val_1 = df.loc[df['Class'] == 1]

    z1 = (cls_val_0.size*100)/df.size
    z2 = (cls_val_1.size*100)/df.size

    print("Per(%) of 0 = ", z1)
    print("Per(%) of 1 = ", z2)

def lab04_task7_IMRAN():
    df.hist(by=df['Class'], bins=50)

def lab04_task8_IMRAN():
    
    import matplotlib.pyplot as plt
    cls_val_0 = df.loc[df['Class'] == 0]
    cls_val_1 = df.loc[df['Class'] == 1]

    z1 = (cls_val_0.size*100)/df.size
    z2 = (cls_val_1.size*100)/df.size

    print("Per(%) of 0 = ", z1)
    print("Per(%) of 1 = ", z2)
    x = [1,2]
    y = [z1,z2]
    tick_label = ["0%", "1%"]
    plt.bar(x,y,tick_label=tick_label,width = 0.4, color = ['blue','orange'])
    plt.xlabel("Class Specific Elements")
    plt.ylabel("Frequence of %")
    plt.show()

def lab04_task9_IMRAN():
    df.hist(column = ['Time'], bins= 100)
    df.hist(column = ['Amount'], bins= 100)
    df.hist(column = ['V11'], bins= 100)
    df.hist(column = ['V12'], bins= 100)



    print("Negative Skew = ",df[['Time']].skew())
    print("Positive Skew = ",df[['Amount']].skew())
    print("Platykurtic = ",df[['V11']].kurt())
    print("Leptokurtic = ",df[['V12']].kurt())

def lab04_task10_IMRAN():
    mx = df.min().min()
    for i in df.columns:
        for j in df.columns:
            if i!=j:
                corr = df[i].corr(df[j])
                if(corr > mx):
                   mx1 = i
                   mx2 = j
                   mx = corr
    print("The Highest Positive Correlation = ", mx)
    print("It's between ",mx1,"and",mx2)

def lab04_task11_IMRAN():
    df.plot.scatter(x='V7', y='Amount')

def lab04_task12_IMRAN():
    mn = df.max().max()
    for i in df.columns:
        for j in df.columns:
            if i!=j:
                corr = df[i].corr(df[j])
                if(corr < mn):
                   mn1 = i
                   mn2 = j
                   mn = corr
    print("The Highest Negartive Correlation = ", mn)
    print("It's between ",mn1,"and",mn2)

def lab04_task13_IMRAN():
    df.plot.scatter(x='V2', y='Amount')

def lab04_task14_IMRAN():
    df.boxplot(column = ['Amount'])

def lab04_task15_IMRAN():
    import matplotlib.pyplot as plt
    cls_val_0 = df[['Amount', 'Class']].query('Class==0')
    cls_val_0_wcls = cls_val_0['Amount'] 
    cls_val_1 = df[['Amount', 'Class']].query('Class==1')
    cls_val_1_wcls = cls_val_1['Amount'] 
    columns = [cls_val_0_wcls, cls_val_1_wcls]
    fig, ax = plt.subplots()
    ax.boxplot(columns)
    plt.show()
    print("Comment: Yes I find a pattern by considering amount column.")
    print("I see there is a negative correlation between them in the box plot.")

##Task 1
lab04_task1_IMRAN()

## Task 2
lab04_task2_IMRAN()

## Task 3
lab04_task3_IMRAN()

## Task 4
lab04_task4_IMRAN()

## Task 5
lab04_task5_IMRAN()

## Task 6
lab04_task6_IMRAN()

## Task 7
lab04_task7_IMRAN()

## Task 8
lab04_task8_IMRAN()

## Task 9
lab04_task9_IMRAN()

## Task 10
lab04_task10_IMRAN()

## Task 11
lab04_task11_IMRAN()

## Task 12
lab04_task12_IMRAN()

## Task 13
lab04_task13_IMRAN()

## Task 14
lab04_task14_IMRAN()

## Task 15
lab04_task15_IMRAN()